<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flatwhite</name>
    </assembly>
    <members>
        <member name="T:Flatwhite.Argument">
            <summary>
            A class which can provide any argument for caching stuff
            </summary>
        </member>
        <member name="M:Flatwhite.Argument.Any``1">
            <summary>
            Match any argument value compatible with type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.DefaultCacheKeyProvider">
            <summary>
            Default cache key provider
            </summary>
        </member>
        <member name="M:Flatwhite.DefaultCacheKeyProvider.#ctor(Flatwhite.ICacheAttributeProvider)">
            <summary>
            Initialize a default cache key provider using <see cref="T:Flatwhite.ICacheAttributeProvider"/>
            </summary>
            <param name="cacheAttributeProvider"></param>
        </member>
        <member name="M:Flatwhite.DefaultCacheKeyProvider.GetCacheKey(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve cache key
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.BaseInterceptor">
            <summary>
            A class which defined a method to determine whether should stop on an invocation
            </summary>
        </member>
        <member name="M:Flatwhite.BaseInterceptor.CanIntercept(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determine whether should stop on an invocation
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.CacheInterceptor">
            <summary>
            Use this to intercept services to enable caching on methods that have return value
            <para>Only methods decorated with <see cref="T:Flatwhite.OutputCacheAttribute"/> will have its result cached</para>
            </summary>
        </member>
        <member name="M:Flatwhite.CacheInterceptor.#ctor(Flatwhite.IContextProvider,Flatwhite.ICacheProvider,Flatwhite.ICacheStrategy)">
            <summary>
            Specify time to live for caching and optional changeMonitor factory
            </summary>
            <param name="contextProvider"></param>
            <param name="cacheProvider"></param>
            <param name="cacheStrategy">If not provided, the strategy will be resolved from Global.CacheStrategyProvider</param>
        </member>
        <member name="M:Flatwhite.CacheInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Main method to get value from cache if any, set value to cache if there was no cache
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Flatwhite.Strategy.CacheStrategies">
            <summary>
            A factory class to provide default <see cref="T:Flatwhite.ICacheStrategy"/>
            </summary>
        </member>
        <member name="M:Flatwhite.Strategy.CacheStrategies.AllMethods">
            <summary>
            Enable caching for all methods that have output value, default cache time is 1 second
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.CacheStrategies.ForService``1">
            <summary>
            Enable caching on selected methods only
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.Strategy.CacheOutputForAllMethod">
            <summary>
            A cache strategy to cache for all methods
            </summary>
        </member>
        <member name="M:Flatwhite.Strategy.CacheOutputForAllMethod.VaryByParam(System.String)">
            <summary>
            Set vary by params
            </summary>
            <param name="params"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.CacheOutputForAllMethod.VaryByCustom(System.String)">
            <summary>
            Set vary by custom
            </summary>
            <param name="customParams"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.CacheOutputForAllMethod.Duration(System.Int32)">
            <summary>
            Set cache duration in miliseconds
            </summary>
            <param name="durationMiliseconds"></param>
            <returns></returns>
        </member>
        <member name="P:Flatwhite.Strategy.CacheOutputForAllMethod.CacheKeyProvider">
            <summary>
            Cache key provider
            </summary>
        </member>
        <member name="T:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2">
            <summary>
            A strategy to cache on only selected methods
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TCacheAttribute"></typeparam>
        </member>
        <member name="M:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.#ctor">
            <summary>
            The setting for a specific invocation
            </summary>
        </member>
        <member name="M:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.ForMember(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specify the member for the output cache
            </summary>
            <param name="functionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.Duration(System.Int32)">
            <summary>
            Set the cache duration
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.VaryByParam(System.String)">
            <summary>
            Set vary by param for the method
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.VaryByCustom(System.String)">
            <summary>
            Set var by custom for the method
            </summary>
            <param name="custom"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.WithChangeMonitors(System.Func{Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor}})">
            <summary>
            Set the change monitors factory that will create the new change monitors when new cache entry is created
            </summary>
            <param name="changeMonitorFactory"></param>
            <returns></returns>
        </member>
        <member name="P:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.CacheKeyProvider">
            <summary>
            Cache key provider
            </summary>
        </member>
        <member name="M:Flatwhite.Strategy.CacheSelectedMethodsInvocationStrategy`2.GetChangeMonitors(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get change monitors
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.Strategy.DefaultCacheStrategy">
            <summary>
            Default strategy which will enable cache for methods with <see cref="T:Flatwhite.OutputCacheAttribute"/> decorated
            </summary>
        </member>
        <member name="F:Flatwhite.Strategy.DefaultCacheStrategy._cacheAttributeProvider">
            <summary>
            The cache attribute provider
            </summary>
        </member>
        <member name="M:Flatwhite.Strategy.DefaultCacheStrategy.#ctor(Flatwhite.ICacheAttributeProvider)">
            <summary>
            Initialize default cache strategy with a <see cref="T:Flatwhite.ICacheAttributeProvider"/>
            </summary>
            <param name="cacheAttributeProvider"></param>
        </member>
        <member name="M:Flatwhite.Strategy.DefaultCacheStrategy.GetCacheTime(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get cache time from <see cref="T:Flatwhite.OutputCacheAttribute"/>
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.DefaultCacheStrategy.GetChangeMonitors(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get empty list change monitor
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Flatwhite.Strategy.DefaultCacheStrategy.CacheKeyProvider">
            <summary>
            Default cache key provider
            </summary>
        </member>
        <member name="T:Flatwhite.Strategy.IMethodCacheRuleBuilder`1">
            <summary>
            The member cache rule builder for a memthod on type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flatwhite.Strategy.IMethodCacheRuleBuilder`1.Duration(System.Int32)">
            <summary>
            Set duration
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.IMethodCacheRuleBuilder`1.VaryByParam(System.String)">
            <summary>
            Set vảy by param
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.IMethodCacheRuleBuilder`1.VaryByCustom(System.String)">
            <summary>
            Set vary by custom
            </summary>
            <param name="custom"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.Strategy.IMethodCacheRuleBuilder`1.WithChangeMonitors(System.Func{Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor}})">
            <summary>
            Set the change monitors factory that will create the new change monitors when new cache entry is created
            https://msdn.microsoft.com/en-us/library/system.runtime.caching.changemonitor(v=vs.110).aspx
            </summary>
            <param name="changeMonitorFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.Strategy.IMethodCacheStrategy`1">
            <summary>
            A method cache strategy created for selected member
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Flatwhite.Strategy.ITypeCacheRuleBuilder`1">
            <summary>
            The rule builder for a type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flatwhite.Strategy.ITypeCacheRuleBuilder`1.ForMember(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Create a cache strategy for a member
            </summary>
            <param name="functionExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.Global">
            <summary>
            Global config
            </summary>
        </member>
        <member name="P:Flatwhite.Global.ContextProvider">
            <summary>
            Context provider
            </summary>
        </member>
        <member name="P:Flatwhite.Global.CacheProvider">
            <summary>
            Cache provider
            </summary>
        </member>
        <member name="P:Flatwhite.Global.CacheKeyProvider">
            <summary>
            Cache key provider
            </summary>
        </member>
        <member name="P:Flatwhite.Global.CacheStrategyProvider">
            <summary>
            Cache strategy provider
            </summary>
        </member>
        <member name="P:Flatwhite.Global.CacheAttributeProvider">
            <summary>
            Cache attribute provider
            </summary>
        </member>
        <member name="T:Flatwhite.ICacheAttributeProvider">
            <summary>
            Get cache attribute for a method info
            </summary>
        </member>
        <member name="M:Flatwhite.ICacheAttributeProvider.GetCacheAttribute(System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get 1 cache attribute
            </summary>
            <param name="methodInfo"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.ICacheKeyProvider">
            <summary>
            A provider to resolve a unique key for caching by invocation and context
            </summary>
        </member>
        <member name="M:Flatwhite.ICacheKeyProvider.GetCacheKey(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get unique cache key
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.ICacheProvider">
            <summary>
            Cache provider
            </summary>
        </member>
        <member name="M:Flatwhite.ICacheProvider.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            When overridden in a derived class, inserts a cache entry into the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
        </member>
        <member name="M:Flatwhite.ICacheProvider.Remove(System.String)">
            <summary>
            When overridden in a derived class, removes the cache entry from the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.></param>
            <returns>An object that represents the value of the removed cache entry that was specified by the key, or null if the specified entry was not found.</returns>
        </member>
        <member name="M:Flatwhite.ICacheProvider.Get(System.String)">
            <summary>
            When overridden in a derived class, gets the specified cache entry from the cache as an object.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <returns>The cache entry that is identified by key.</returns>
        </member>
        <member name="M:Flatwhite.ICacheProvider.Contains(System.String)">
            <summary>
            When overridden in a derived class, checks whether the cache entry already exists in the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <returns>true if the cache contains a cache entry with the same key value as key; otherwise, false.</returns>
        </member>
        <member name="T:Flatwhite.ICacheStrategy">
            <summary>
            Provide the cache strategy
            </summary>
        </member>
        <member name="M:Flatwhite.ICacheStrategy.GetCacheTime(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get cache time by invocation and context
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.ICacheStrategy.GetChangeMonitors(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the change monitor by invocation and context
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Flatwhite.ICacheStrategy.CacheKeyProvider">
            <summary>
            Cache key provider
            </summary>
        </member>
        <member name="T:Flatwhite.ICacheStrategyProvider">
            <summary>
            A provider to resolve <see cref="T:Flatwhite.ICacheStrategy"/>
            </summary>
        </member>
        <member name="M:Flatwhite.ICacheStrategyProvider.GetStrategy(Castle.DynamicProxy.IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get cache strategy by invocation and context
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.IContextProvider">
            <summary>
            A provider to resolve a context which is a key/value dictionary. This could be a HttpRequestContext or a WebApi context or anything from current thread
            </summary>
        </member>
        <member name="M:Flatwhite.IContextProvider.GetContext">
            <summary>
            Get context
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.EmptyContextProvider">
            <summary>
            A default context provider which returns empty dictionary
            </summary>
        </member>
        <member name="T:Flatwhite.NoCacheAttribute">
            <summary>
            Use this attribute to decorate on a method where we don't want to cache while the class or interface decorated with OutputCache attribute
            </summary>
        </member>
        <member name="T:Flatwhite.OutputCacheAttribute">
            <summary>
            Use this attribute to decorate on a method which has return type and you want the library to cache the result
            </summary>
        </member>
        <member name="F:Flatwhite.OutputCacheAttribute.Default">
            <summary>
            Default OutputCacheAttribute
            </summary>
        </member>
        <member name="P:Flatwhite.OutputCacheAttribute.Duration">
            <summary>
            Gets or sets the cache duration, in miliseconds.
            </summary>
        </member>
        <member name="P:Flatwhite.OutputCacheAttribute.VaryByParam">
            <summary>
            The duration in miliseconds the cache engine should keep the expired cache value while refreshing the cache data asynchronously
            </summary>
            TODO: public int RefreshingTimeout { get; set; }
            <summary>
            A semicolon-separated list of strings that correspond to to parameter values
            </summary>
        </member>
        <member name="P:Flatwhite.OutputCacheAttribute.VaryByCustom">
            <summary>
            Gets or sets the vary-by-custom value.
            </summary>
        </member>
        <member name="T:Flatwhite.SingleCacheAttributeProvider">
            <summary>
            The provider that will return 1 <see cref="T:Flatwhite.OutputCacheAttribute"/> no matter what MethodInfo and context is
            </summary>
        </member>
        <member name="P:Flatwhite.SingleCacheAttributeProvider.Attribute">
            <summary>
            The attribute that will be returned
            </summary>
        </member>
        <member name="M:Flatwhite.SingleCacheAttributeProvider.#ctor(Flatwhite.OutputCacheAttribute)">
            <summary>
            Initialize the provider with the provided attribute
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:Flatwhite.SingleCacheAttributeProvider.GetCacheAttribute(System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return the set attribute
            </summary>
            <param name="methodInfo"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.ExpressionBaseCacheAttributeProvider`2">
            <summary>
            Cache attribute provider to return different cache attribute by different method expression
            </summary>
        </member>
        <member name="M:Flatwhite.ExpressionBaseCacheAttributeProvider`2.#ctor">
            <summary>
            Initialize an ExpressionBaseCacheAttributeProvider
            </summary>
        </member>
        <member name="M:Flatwhite.ExpressionBaseCacheAttributeProvider`2.GetCacheAttribute(System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get cache attribute
            </summary>
            <param name="methodInfo"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Flatwhite.ExpressionBaseCacheAttributeProvider`2.Expressions">
            <summary>
            List of configured expressions
            </summary>
        </member>
        <member name="T:Flatwhite.ExpressionSetting`2">
            <summary>
            Output cache settings for a method expression
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TCacheAttribute"></typeparam>
        </member>
        <member name="M:Flatwhite.ExpressionSetting`2.#ctor">
            <summary>
            Init an instance of ExpressionSetting with empty ChangeMonitor list and default cache attribute
            </summary>
        </member>
        <member name="P:Flatwhite.ExpressionSetting`2.Expression">
            <summary>
            The expression represents the method invocation
            </summary>
        </member>
        <member name="P:Flatwhite.ExpressionSetting`2.CacheAttribute">
            <summary>
            The cache attribute for the current expression
            </summary>
        </member>
        <member name="P:Flatwhite.ExpressionSetting`2.ChangeMonitorFactory">
            <summary>
            The change monitors factory configured for current expression
            <para>These change monitors instances will be created and assign to the cache policy for the new cache</para>
            </summary>
        </member>
    </members>
</doc>

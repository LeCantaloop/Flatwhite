<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flatwhite.WebApi</name>
    </assembly>
    <members>
        <member name="T:Flatwhite.WebApi.CacheControl.CachControlHeaderHandlerProvider">
            <summary>
            Default implementation of <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" /> using a static <see cref="T:System.Collections.Generic.List`1" />
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.CachControlHeaderHandlerProvider.Get(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get all registered <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" /> from this provider
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.CachControlHeaderHandlerProvider.Register(Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler)">
            <summary>
            Register a <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" /> to this provider
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.EtagHeaderHandler">
            <summary>
            An implementation of <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> that use the etag to check whether these is an exisisting cache data
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.EtagHeaderHandler.#ctor(Flatwhite.WebApi.ICacheResponseBuilder)">
            <summary>
            Initializes an object of <see cref="T:Flatwhite.WebApi.CacheControl.EtagHeaderHandler" /> using a provided <see cref="T:Flatwhite.WebApi.ICacheResponseBuilder" />
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.EtagHeaderHandler.HandleAsync(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Try to get the cache from etag and build the response if cache is available
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider">
            <summary>
            A provider to get all registered <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> from request
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider.Get(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get all registered <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> from request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider.Register(Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler)">
            <summary>
            Register a <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> to current provider 
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler">
            <summary>
            Provide a single method to try to build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> and <see cref="T:System.Net.Http.HttpRequestMessage" />
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler.HandleAsync(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            This method will try to build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> and <see cref="T:System.Net.Http.HttpRequestMessage" />
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.CacheMessageHandler">
            http://www.asp.net/web-api/overview/security/authentication-and-authorization-in-aspnet-web-api
            <summary>
            This is a custom WebApi message handler which try to build the response if cache data is available
            This should create a response asap if there is the cache without waiting for the <see cref="T:Flatwhite.WebApi.OutputCacheAttribute" /> to do that which is quite late
            and quite heavy "if your controller has too many dependencies". People should try to not having heavy Controller anyway. 
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheMessageHandler.#ctor(Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider)">
            <summary>
            Initializes an instance of <see cref="T:Flatwhite.WebApi.CacheMessageHandler" /> from a provided <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" />
            </summary>
            <param name="handlerProvider"></param>
        </member>
        <member name="M:Flatwhite.WebApi.CacheMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Process the request and attempt to build the response from cache
            If it failed, it simply logs the error and continue the pipeline
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.CacheResponseBuilder">
            <summary>
            Build a response from cacheItem but also take into account all cache-request-directive 
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheResponseBuilder.GetResponse(System.Net.Http.Headers.CacheControlHeaderValue,Flatwhite.WebApi.WebApiCacheItem,System.Net.Http.HttpRequestMessage)">
            <summary>
            Provide a single method to try to build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />  and <see cref="T:System.Net.Http.HttpRequestMessage" />
            </summary>
        </member>
        <member name="T:Flatwhite.WebApi.ICacheResponseBuilder">
            <summary>
            Build a response from cacheItem but also take into account all cache-request-directive 
            This should be resolvable from <see cref="T:System.Web.Http.Dependencies.IDependencyResolver" />
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.ICacheResponseBuilder.GetResponse(System.Net.Http.Headers.CacheControlHeaderValue,Flatwhite.WebApi.WebApiCacheItem,System.Net.Http.HttpRequestMessage)">
            <summary>
            Build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> and <see cref="T:Flatwhite.WebApi.WebApiCacheItem" />
            </summary>
            <param name="requestCacheControl"></param>
            <param name="cacheItem"></param>
            <param name="request"></param>
            <returns>Return null if the cacheItem is not suitable for the request cache control, such as max-age, min-fresh is provided and the cache item is not qualified</returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiCacheItem">
            <summary>
            A cache item object that keeps some details about the data to be cached
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheItem.#ctor">
            <summary>
            Initializes a cache item
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheItem.#ctor(Flatwhite.WebApi.OutputCacheAttribute)">
            <summary>
            Initializes a cache item
            </summary>
            <param name="cacheAttribute"></param>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.Content">
            <summary>
            The response data
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.Checksum">
            <summary>
            The checksum of the Content
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.ResponseMediaType">
            <summary>
            Media type
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.ResponseCharSet">
            <summary>
            Charset
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.StaleIfError">
            <summary>
            https://tools.ietf.org/html/rfc5861#4.1
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.IgnoreRevalidationRequest">
            <summary>
            A cache MAY be configured to return stale responses without validation
            <para>If set to TRUE, the server will return cache item as soon as the cache item is available and ignore all cache control directives sent from client
            such as no-cache, no-store or max-age, max-stale. Warning 110 (Response is stale) will be included in the response header</para>
            <para>This may be helpful to guarantee that the endpoint will not revalidate the cache all the time by some one sending request with no-cache header</para>
            </summary>
        </member>
        <member name="T:Flatwhite.WebApi.RevalidateAttribute">
            <summary>
            Use this attribute to decorate on a method where you want to revalidate a specific cache entry after a method is invoked
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.RevalidateAttribute.Keys">
            <summary>
            List of "revalidation keys" to notify the cache store. They are not neccessary the cache key
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.RevalidateAttribute.#ctor(System.String[])">
            <summary>
            Initializes a <see cref="T:Flatwhite.WebApi.RevalidateAttribute" /> with a list of revalidation keys
            </summary>
            <param name="keys">List of "revalidation keys" to notify the cache store. They are not neccessary the cache key</param>
        </member>
        <member name="M:Flatwhite.WebApi.RevalidateAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
            <summary>
            Revalidate caches after call method
            </summary>
            <param name="actionExecutedContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.RevalidateAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
            <summary>
            Revalidate caches after call method
            </summary>
            <param name="actionExecutedContext"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiCacheStrategy">
            <summary>
            A <see cref="T:Flatwhite.ICacheStrategy"/> implementation for web api
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheStrategy.#ctor(Flatwhite.IServiceActivator)">
            <summary>
            Create an instance of WebApiCacheStrategy with ServiceActivator
            </summary>
            <param name="activator"></param>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheStrategy.CanCacheNoneVirtualOrFinalMethods">
            <summary>
            Should return true as WebApi doesn't use Dynamic proxy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheStrategy.GetCacheStore(Flatwhite._IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            WebAPI should use AsyncCacheStore instead
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiCacheStrategyProvider">
            <summary>
            A provider to return <see cref="T:Flatwhite.WebApi.WebApiCacheStrategy" /> for WebApi request
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheStrategyProvider.GetStrategy(Flatwhite._IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return a <see cref="T:Flatwhite.ICacheStrategy" /> if the request is webApi request
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.OutputCacheAttribute">
            <summary>
            Represents an attribute that is used to mark an WebApi action method whose output will be cached.
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.CacheStrategyType">
            <summary>
            The custom type of <see cref="T:Flatwhite.ICacheStrategy" /> to use. If not provided, the default strategy from Global will be used
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.CacheStoreType">
            <summary>
            The custom type of <see cref="T:Flatwhite.ICacheStore" /> to use. If not provided, the default strategy from Global will be used
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.CacheStoreId">
            <summary>
            The unique number id of the cache store when registered against the <see cref="T:Flatwhite.Provider.ICacheStoreProvider" />
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge">
            <summary>
            Gets or sets the cache duration, in seconds.
            <para>Also set Cache-Control: max-age=*seconds* to the message response header.</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.SMaxAge">
            <summary>
            Set Cache-Control: s-maxage=*seconds* to the message response header.
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByParam">
            <summary>
            A semicolon-separated list of strings that correspond to to parameter values
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByCustom">
            <summary>
            Gets or sets the VaryByCustom value which facilitate different cache rules by custom key in invocationContext
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByHeader">
            <summary>
            The VaryByHeader is a semicolon-delimited set of headers used to vary the cached output. These are HTTP headers associated with the request
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.MustRevalidate">
            <summary>
            Set Cache-Control: must-revalidate to the message response header.
            <para>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4</para> 
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.ProxyRevalidate">
            <summary>
            Set Cache-Control: proxy-revalidate to the message response header.
            <para>The proxy-revalidate directive has the same meaning as the must- revalidate directive, except that it does not apply to non-shared user agent caches.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.NoCache">
            <summary>
            Set Cache-Control: no-cache to the message response header. IE uses no-cache, and Firefox uses no-store.
            <para>If the no-cache directive does not specify a field-name, then a cache MUST NOT use the response to satisfy a subsequent request without successful revalidation with the origin server. This allows an origin server to prevent caching even by caches that have been configured to return stale responses to client requests.</para>
            <para>If the no-cache directive does specify one or more field-names, then a cache MAY use the response to satisfy a subsequent request, subject to any other restrictions on caching.However, the specified field-name(s) MUST NOT be sent in the response to a subsequent request without successful revalidation with the origin server.This allows an origin server to prevent the re-use of certain header fields in a response, while still allowing caching of the rest of the response.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.NoStore">
            <summary>
            Set Cache-Control: no-store to the message response header. IE uses no-cache, and Firefox uses no-store.
            <para>A cache (browser cache, proxies) MUST NOT store any part of either this response or the request that elicited it. This directive applies to both non-shared and shared caches.</para>
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.2
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.NoTransform">
            <summary>
            Set Cache-Control:no-transform to the message response header.
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.5</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.Private">
            <summary>
            Set Cache-Control: private to the message response header.
            <para>Indicates that all or part of the response message is intended for a single user and MUST NOT be cached by a shared cache.</para>
            <para>This allows an origin server to state that the specified parts of the response are intended for only one user and are not a valid response for requests by other users.</para>
            <para>A private (non-shared) cache MAY cache the response.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.Public">
            <summary>
            Set Cache-Control: public to the message response header.
            <para>Indicates that the response MAY be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache. (See also Authorization, section 14.8, for additional details.)</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.StaleWhileRevalidate">
            <summary>
            Set Cache-Control: max-age=*seconds*, stale-while-revalidate=*seconds* to the response message
            <para>This should be used with <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge" /> to indicates that caches MAY serve the response in which it appears after it becomes stale, up to the indicated number of seconds https://tools.ietf.org/html/rfc5861</para>
            <para>The first request comes to the server and gets a stale cache will also make the cache system auto refresh once. So if the endpoint is not 
            so active, it's better to turn on <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.AutoRefresh" /> to make the cache refresh when it starts to be stale</para> 
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.StaleIfError">
            <summary>
            Set Cache-Control: max-age=*seconds*, stale-if-error=*seconds* to the response message
            <para>This should be used with <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge" /> to indicates that caches may be used if an error is encountered after becoming stale for an additional indicated number of seconds</para>
            https://tools.ietf.org/html/rfc5861#4.1
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.IgnoreRevalidationRequest">
            <summary>
            A cache MAY be configured to return stale responses without validation
            <para>If set to TRUE, the server will return cache item as soon as the cache item is available and ignore all cache control directives sent from client
            such as no-cache, no-store or max-age, max-stale. Warning 110 (Response is stale) will be included in the response header</para>
            <para>This may be helpful to guarantee that the endpoint will not revalidate the cache all the time by some one sending request with no-cache header</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.RevalidationKey">
            <summary>
            A key to used to delete the cache when an method with relevant <see cref="T:Flatwhite.WebApi.RevalidateAttribute" /> is invoked
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.AutoRefresh">
            <summary>
            If set to true, the cache will be auto refreshed every <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge"/> second(s).
            <para>It's a trade-off to turn this on as you don't want too many Timers trying to refresh your cache data very small amout of seconds especially when you have <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge"/> too small
            and there is so many variaties of the cache (because of ,<see cref="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByParam" />). 
            </para>
            <para>If the api endpoint is an busy endpoint with small value of <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge"/>, it's better to keep this off and use <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.StaleWhileRevalidate"/></para>
            <para>If the endpoint is not busy but you want to keep the cache always available, turn this on and specify the <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.StaleWhileRevalidate"/> with a value greater than 0</para>
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetCacheStrategy(System.Web.Http.Dependencies.IDependencyScope,Flatwhite._IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get <see cref="T:Flatwhite.ICacheStrategy" /> from <see cref="T:System.Web.Http.Dependencies.IDependencyScope" />
            </summary>
            <param name="scope"></param>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetCacheResponseBuilder(System.Web.Http.Dependencies.IDependencyScope)">
            <summary>
            Get <see cref="T:Flatwhite.WebApi.ICacheResponseBuilder" /> from <see cref="T:System.Web.Http.Dependencies.IDependencyScope" />
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.OnActionExecutingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
            <summary>
            Check CacheControl request, get CacheItem, build response and return if cache available
            </summary>
            <param name="actionContext"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.ShouldIgnoreCache(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage)">
            <summary>
            Determine whether or not should ignore all the cache settings base on the 
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
            <summary>
            Store the response to cache store, add CacheControl and Etag to response
            </summary>
            <param name="actionExecutedContext"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.ApplyCacheHeaders(System.Net.Http.HttpResponseMessage,System.Net.Http.HttpRequestMessage)">
            <summary>
            Apply the CacheControl header to response
            </summary>
            <param name="response"></param>
            <param name="request"></param>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.HashCacheKey(System.String)">
            <summary>
            Make a hash string of the original senstivive cacheKey
            </summary>
            <param name="originalCacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetInvocation(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get <see cref="T:Flatwhite._IInvocation" /> from <see cref="T:System.Web.Http.Controllers.HttpActionContext" />
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetInvocationContext(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get context data from <see cref="T:System.Web.Http.Controllers.HttpActionContext" />
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.CreatePhoenix(Flatwhite._IInvocation,Flatwhite.WebApi.WebApiCacheItem,System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Create the phoenix object which can refresh the cache itself if StaleWhileRevalidate > 0
            </summary>
            <param name="invocation"></param>
            <param name="cacheItem"></param>
            <param name="request"></param>
            <param name="mediaTypeFormatter">The formater that was used to create the reasponse at the first invocation</param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiContextProvider">
            <summary>
            A <see cref="T:Flatwhite.Provider.IContextProvider" /> for webapi that puts request data to the context dictionary
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiContextProvider.#ctor(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Initializes an instance of <see cref="T:Flatwhite.WebApi.WebApiContextProvider" />
            </summary>
            <param name="httpActionContext"></param>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiContextProvider.GetContext">
            <summary>
            Create the context from request
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiExtensions">
            <summary>
            Provide extension methods to enable Flatwhite WebApi cache
            </summary>
        </member>
        <member name="F:Flatwhite.WebApi.WebApiExtensions.__flatwhite_dont_cache">
            <summary>
            __flatwhite_dont_cache_
            </summary>
        </member>
        <member name="F:Flatwhite.WebApi.WebApiExtensions._dependencyResolverActivator">
            <summary>
            This will be used by Phoenix to create Controller instance on the fly when cache is refreshing
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiExtensions.UseFlatwhiteCache``1(Owin.IAppBuilder,System.Web.Http.HttpConfiguration)">
            <summary>
            Create required components to use Flatwhite cache for WebApi
            </summary>
            <typeparam name="T"></typeparam>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiPhoenix">
            <summary>
            A web api phoenix to support auto refresh for webApi
            <para>
            It will create instance of WebApi controller and invoke the ActionMethod with cached arguments.
            It will not work if the controller required QueryString, Headers or anything outside these action method parameters
            But you can override the Phoenix MethodInfo, Arguments or method <see cref="M:Flatwhite.Hot.Phoenix.GetTargetInstance" />, <see cref="M:Flatwhite.Hot.Phoenix.InvokeAndGetBareResult(System.Object,System.Object)" />, 
            or completely change the way the Phoenix reborn by overriding method , <see cref="M:Flatwhite.Hot.Phoenix.Reborn(System.Object)" />,
            
            Idealy, keep Controller thin and use proper Model binding instead of dodgy access the Request object.
            </para>
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.#ctor(Flatwhite._IInvocation,Flatwhite.CacheInfo,Flatwhite.WebApi.OutputCacheAttribute,System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Initializes a WebApiPhoenix
            </summary>
            <param name="invocation"></param>
            <param name="info"></param>
            <param name="outputCache">This should the the OutputCacheAttribute isntance</param>
            <param name="requestMessage"></param>
            <param name="mediaTypeFormatter">The formater used to create the HttpResponse if the return type of the action method is not a standard WebAPI action result</param>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiPhoenix.Activator">
            <summary>
            This Activator mainly used to resolve the WebApi controller instance
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.GetCacheItem(System.Object,System.Object)">
            <summary>
            Build the <see cref="T:Flatwhite.WebApi.WebApiCacheItem" /> from action result byte[] data
            </summary>
            <param name="response"></param>
            <param name="outputCache"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.GetTargetInstance">
            <summary>
            Create the controller and set Request instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.CloneRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Clone a HttpRequestMessage
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.WriteCacheUpdatedLog">
            <summary>
            Write cache updated for request
            </summary>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiDependencyResolverActivator">
            <summary>
            This class will use WebApi DependencyResolver to resolve the controllers
            </summary>
        </member>
    </members>
</doc>
